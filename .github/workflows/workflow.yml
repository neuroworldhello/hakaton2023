name: CI-CD

# Запускаем только для ветки master
on:
  push:
    branches:
      - master

# Определяем переменные окружения
env:
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DOCKERHUB_REPOSITORY: dronotte
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgrespass
          POSTGRES_DB: best
        ports:
          - 5432:5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # Собираем backend и frontend компоненты, протестируем их и создаем docker-образы
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Change permissions for gradlew
        run: chmod +x backend/gradlew

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Build and test backend
        run: |
          cd backend
          ./gradlew clean build test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/best
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgrespass
          SPRING_JPA_HIBERNATE_DDL_AUTO: update
          SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
          SPRING_JPA_SHOW_SQL: true

      - name: Build frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPOSITORY }}/backend:${{ env.IMAGE_TAG }}
            ${{ env.DOCKERHUB_REPOSITORY }}/backend:latest

      - name: Build frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: frontend
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPOSITORY }}/frontend:${{ env.IMAGE_TAG }}
            ${{ env.DOCKERHUB_REPOSITORY }}/frontend:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.8"
      - name: Setup Yandex Cloud CLI
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH="$PATH:/home/runner/.yandex-cloud/bin"
#      - name: Get service account key
#        run: echo "${{ secrets.KEY_JSON }}" > key.json
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
      - name: Terraform init
        run: terraform init
      - name: Check terraform file
        run: cat terraform.tf
      - name: Terraform apply
        run: |
          terraform apply \
            -auto-approve \
            -var cloud_id=${{ secrets.CLOUD_ID }} \
            -var cloud_folder_id=${{ secrets.CLOUD_FOLDER_ID }} \
            -var cloud_zone=${{ secrets.CLOUD_ZONE }}
            -var sa_key=${{ secrets.KEY_JSON }}
      - name: Export Terraform output
        run: terraform output -json > terraform.output.json
      - name: Set environment variables
        run: |
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export POSTGRES_DB=${{ secrets.POSTGRES_USER }}
      - name: Create .env file
        run: envsubst < .env.tpl > .env
      - name: Create docker-compose file
        run: envsubst < docker-compose.yml.tpl > docker-compose.yml
      - name: Check hostname
        run: echo $(terraform output -raw external_ip)
      - name: Copy files to remote server
        run: |
          scp -o StrictHostKeyChecking=no -r docker-compose.yml .env ubuntu@$(terraform output -raw external_ip):~
      - name: Start services
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$(terraform output -raw external_ip) << EOF
            docker-compose up -d
          EOF